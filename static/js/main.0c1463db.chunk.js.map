{"version":3,"sources":["cell/Cell.tsx","util/board-helpers.ts","board/Board.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Cell","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClick","bind","assertThisInitialized","inherits","createClass","key","value","active","react_default","a","createElement","className","x","y","Component","createInitialBoard","output","i","row","t","push","Board","state","board","width","height","cellClick","nextGenerationClick","resetBoard","_this2","Fragment","map","curr","c","String","Cell_Cell","setState","boardState","newBoard","activeNeighbours","topY","bottomY","length","leftX","rightX","getSurroundingActive","willThisCellSurvive","App","Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c1463db.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './cell.css';\n\nexport interface ICellProps {\n\tonClick: (x: number, y: number) => void;\n\tx: number;\n\ty: number;\n\tactive: boolean;\n}\n\nexport class Cell extends Component<ICellProps> {\n\tpublic constructor(props: ICellProps) {\n\t\tsuper(props);\n\n\t\tthis.onClick = this.onClick.bind(this);\n\t}\n\n\tpublic render() {\n\t\tif (this.props.active) {\n\t\t\treturn (\n\t\t\t\t<li className=\"cell\" onClick={this.onClick}>\n\t\t\t\t\tâ˜º\n\t\t\t\t</li>\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t<li className=\"cell\" onClick={this.onClick}>\n\t\t\t\t&nbsp;\n\t\t\t</li>\n\t\t);\n\t}\n\n\tprivate onClick() {\n\t\tthis.props.onClick(this.props.x, this.props.y);\n\t}\n}\n","/**\n * For setting up the initial empty board\n *\n * @param x\n * @param y\n */\nexport function createInitialBoard(x: number, y: number): boolean[][] {\n\tconst output = [];\n\n\tfor (let i = 0; i < y; i++) {\n\t\tlet row = [];\n\t\tfor (let t = 0; t < x; t++) {\n\t\t\trow.push(false);\n\t\t}\n\n\t\toutput.push(row);\n\t}\n\n\treturn output;\n}\n\n/**\n * Retreiving how many active cells are neighbouring a coord\n * World is round, not flat earth, so each coord always has 8 neightbours\n *\n * @param x\n * @param y\n * @param boardState\n */\nexport function getSurroundingActive(\n\tx: number,\n\ty: number,\n\tboardState: boolean[][]\n): number {\n\tlet active = 0;\n\tlet topY = y - 1;\n\tlet bottomY = y + 1;\n\tif (y === 0) {\n\t\ttopY = boardState.length - 1;\n\t}\n\n\tif (y === boardState.length - 1) {\n\t\tbottomY = 0;\n\t}\n\n\tlet leftX = x - 1;\n\tlet rightX = x + 1;\n\tif (x === 0) {\n\t\tleftX = boardState[0].length - 1;\n\t}\n\n\tif (x === boardState[0].length - 1) {\n\t\trightX = 0;\n\t}\n\n\t// top left\n\tif (boardState[topY][leftX]) {\n\t\tactive++;\n\t}\n\n\t// top mid\n\tif (boardState[topY][x]) {\n\t\tactive++;\n\t}\n\n\t// top right\n\tif (boardState[topY][rightX]) {\n\t\tactive++;\n\t}\n\n\t// mid left\n\tif (boardState[y][leftX]) {\n\t\tactive++;\n\t}\n\n\t// mid right\n\tif (boardState[y][rightX]) {\n\t\tactive++;\n\t}\n\n\t// bottom left\n\tif (boardState[bottomY][leftX]) {\n\t\tactive++;\n\t}\n\n\t// bottom mid\n\tif (boardState[bottomY][x]) {\n\t\tactive++;\n\t}\n\n\t// bottom right\n\tif (boardState[bottomY][rightX]) {\n\t\tactive++;\n\t}\n\n\treturn active;\n}\n\n/**\n * Check if this cell will survive the next iteration\n *\n * @param x\n * @param y\n * @param boardState\n */\nexport function willThisCellSurvive(\n\tx: number,\n\ty: number,\n\tboardState: boolean[][]\n): boolean {\n\tconst activeNeighbours = getSurroundingActive(x, y, boardState);\n\n\tif (activeNeighbours === 2 && boardState[y][x]) {\n\t\treturn true;\n\t}\n\n\tif (activeNeighbours === 3) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Calculate the next iteration of board state\n *\n * @param boardState\n */\nexport function getNextBoardState(boardState: boolean[][]): boolean[][] {\n\treturn boardState.map((curr, y) => {\n\t\treturn curr.map((c, x) => {\n\t\t\treturn willThisCellSurvive(x, y, boardState);\n\t\t});\n\t});\n}\n","import React, { Component } from 'react';\n\nimport { Cell } from '../cell/Cell';\nimport { createInitialBoard, getNextBoardState } from '../util/board-helpers';\n\nimport './board.css';\n\nexport interface IBoardProps {\n\twidth: number;\n\theight: number;\n}\n\ninterface IBoardState {\n\t// history: boolean[][];\n\tboard: boolean[][];\n}\n\nexport class Board extends Component<IBoardProps, IBoardState> {\n\tpublic constructor(props: IBoardProps) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\t// history: [],\n\t\t\tboard: createInitialBoard(this.props.width, this.props.height)\n\t\t};\n\n\t\tthis.cellClick = this.cellClick.bind(this);\n\t\tthis.nextGenerationClick = this.nextGenerationClick.bind(this);\n\t\tthis.resetBoard = this.resetBoard.bind(this);\n\t}\n\n\tpublic render() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className=\"board\">\n\t\t\t\t\t{this.state.board.map((curr, x) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div key={x}>\n\t\t\t\t\t\t\t\t{curr.map((c, y) => {\n\t\t\t\t\t\t\t\t\tlet key = String(x) + String(y);\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<Cell\n\t\t\t\t\t\t\t\t\t\t\tkey={key}\n\t\t\t\t\t\t\t\t\t\t\tx={x}\n\t\t\t\t\t\t\t\t\t\t\ty={y}\n\t\t\t\t\t\t\t\t\t\t\tactive={c}\n\t\t\t\t\t\t\t\t\t\t\tonClick={this.cellClick}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t\t<button onClick={this.nextGenerationClick}>\n\t\t\t\t\tNext Generation\n\t\t\t\t</button>\n\t\t\t\t<button onClick={this.resetBoard}>Reset Board</button>\n\t\t\t</>\n\t\t);\n\t}\n\n\tprivate cellClick(x: number, y: number): void {\n\t\tthis.setState(state => {\n\t\t\tstate.board[x][y] = !state.board[x][y];\n\t\t\treturn {\n\t\t\t\tboard: state.board\n\t\t\t};\n\t\t});\n\t}\n\n\tprivate nextGenerationClick(): void {\n\t\tconst newBoard = getNextBoardState(this.state.board);\n\t\tthis.setState({\n\t\t\tboard: newBoard\n\t\t});\n\t}\n\n\tprivate resetBoard(): void {\n\t\tthis.setState({\n\t\t\tboard: createInitialBoard(this.props.width, this.props.height)\n\t\t});\n\t}\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Board } from './board/Board';\n\nclass App extends Component {\n\tconstructor(props: any) {\n\t\tsuper(props);\n\t}\n\trender() {\n\t\treturn <Board width={10} height={10} />;\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}